package main

// Реализовать структуру-счетчик, которая будет инкрементироваться в конкурентной среде.
//По завершению программа должна выводить итоговое значение счетчика.

import (
	"fmt"
	"sync"
)

type Counter struct {
	mu    sync.Mutex // Мьютекс для синхронизации
	count int        // Значение счетчика
}

// Инкрементирует счетчик
func (c *Counter) Increment() {
	c.mu.Lock()   // Захват мьютекса для защиты от конкурентного доступа
	c.count++     // Инкрементируем счетчик
	c.mu.Unlock() // Освобождаем мьютекс
}

// Возвращает текущее значение счетчика
func (c *Counter) Value() int {
	c.mu.Lock()         // Захват мьютекса
	defer c.mu.Unlock() // Освобождение мьютекса после завершения
	return c.count
}

func main() {
	var wg sync.WaitGroup
	counter := &Counter{} // Создаем новый экземпляр Counter

	// Запускаем 100 горутин для инкремента счетчика
	for i := 0; i < 100; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			counter.Increment() // Инкрементируем счетчик
		}()
	}

	// Ждем завершения всех горутин
	wg.Wait()

	// Выводим итоговое значение счетчика
	fmt.Printf("Итоговое значение счетчика: %d\n", counter.Value())
}
